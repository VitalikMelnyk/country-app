{"version":3,"sources":["shared/graphql.js","components/charts/LineChart.js","components/charts/BarChart.js","components/ChartBox/ChartBox.js","App.js","serviceWorker.js","index.js"],"names":["LIST_PERSONS","gql","LIST_PLANETS","LineChartComponent","useQuery","data","loading","error","className","characters","allPersons","map","person","name","height","mass","retrievePersons","console","log","width","margin","top","right","left","bottom","strokeDasharray","dataKey","type","stroke","activeDot","r","BarChartComponent","planets","allPlanets","planet","population","rotationPeriod","orbitalPeriod","getPlanet","yAxisId","orientation","fill","ChartBox","App","Boolean","window","location","hostname","match","cache","InMemoryCache","client","ApolloClient","uri","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.b31ba106.chunk.js","sourcesContent":["import { gql } from \"apollo-boost\";\nexport const LIST_PERSONS = gql`\n  {\n    allPersons {\n      id\n      name\n      gender\n      height\n      mass\n    }\n  }\n`;\n\nexport const LIST_PLANETS = gql`\n  {\n    allPlanets {\n      name\n      rotationPeriod\n      diameter\n      orbitalPeriod\n      population\n    }\n  }\n`;\n","import React from \"react\";\nimport { useQuery } from \"@apollo/react-hooks\";\nimport {\n  LineChart,\n  Line,\n  XAxis,\n  YAxis,\n  CartesianGrid,\n  Tooltip,\n  Legend\n} from \"recharts\";\nimport { LIST_PERSONS } from \"../../shared/graphql\";\n\nexport const LineChartComponent = () => {\n  const { data, loading, error } = useQuery(LIST_PERSONS);\n  if (loading) return <p className=\"text-center\">Loading...</p>;\n  if (error) return <p className=\"text-center\">Error :(</p>;\n  const retrievePersons = data => {\n    return data.allPersons.map(person => {\n      return {\n        name: person.name,\n        height: person.height,\n        mass: person.mass\n      };\n    });\n  };\n  const characters = retrievePersons(data);\n  console.log(data.allPersons);\n  console.log(characters);\n\n  return (\n    <>\n      <LineChart\n        width={800}\n        height={500}\n        data={characters}\n        margin={{\n          top: 5,\n          right: 30,\n          left: 20,\n          bottom: 5\n        }}\n      >\n        <CartesianGrid strokeDasharray=\"3 3\" />\n        <XAxis dataKey=\"name\" />\n        <YAxis dataKey=\"height\" />\n        <Tooltip />\n        <Legend />\n        <Line\n          type=\"monotone\"\n          dataKey=\"height\"\n          stroke=\"#8884d8\"\n          activeDot={{ r: 8 }}\n        />\n        <Line\n          type=\"monotone\"\n          dataKey=\"mass\"\n          stroke=\"#82ca9d\"\n          activeDot={{ r: 8 }}\n        />\n      </LineChart>\n    </>\n  );\n};\n","import React from \"react\";\nimport { useQuery } from \"@apollo/react-hooks\";\nimport {\n  BarChart,\n  Bar,\n  Cell,\n  XAxis,\n  YAxis,\n  CartesianGrid,\n  Tooltip,\n  Legend\n} from \"recharts\";\nimport { LIST_PLANETS } from \"../../shared/graphql\";\n\nexport const BarChartComponent = () => {\n  const { data, loading, error } = useQuery(LIST_PLANETS);\n  if (loading) return <p className=\"text-center\">Loading...</p>;\n  if (error) return <p className=\"text-center\">Error :(</p>;\n  const getPlanet = data => {\n    return data.allPlanets.map(planet => {\n      return {\n        name: planet.name,\n        population: planet.population,\n        rotationPeriod: planet.rotationPeriod,\n        orbitalPeriod: planet.orbitalPeriod\n      };\n    });\n  };\n  const planets = getPlanet(data);\n  console.log(data.allPersons);\n  console.log(planets);\n  return (\n    <>\n      <BarChart\n        width={800}\n        height={500}\n        data={planets}\n        margin={{\n          top: 20,\n          right: 30,\n          left: 20,\n          bottom: 5\n        }}\n      >\n        <CartesianGrid strokeDasharray=\"3 3\" />\n        <XAxis dataKey=\"name\" />\n        <YAxis yAxisId=\"left\" orientation=\"left\" stroke=\"#8884d8\" />\n        <YAxis yAxisId=\"right\" orientation=\"right\" stroke=\"#82ca9d\" />\n        <Tooltip />\n        <Legend />\n        <Bar yAxisId=\"left\" dataKey=\"rotationPeriod\" fill=\"#8884d8\" />\n        <Bar yAxisId=\"right\" dataKey=\"orbitalPeriod\" fill=\"#82ca9d\" />\n      </BarChart>\n    </>\n  );\n};\n","import React, { useState, useEffect } from \"react\";\n// import Slider from \"react-slick\";\n// import { settings } from \"../slider/settings\";\nimport { LineChartComponent } from \"../charts/LineChart\";\nimport { BarChartComponent } from \"../charts/BarChart\";\n\nexport const ChartBox = () => {\n  return (\n    <>\n      <div className=\"row text-center\">\n        {/* <Slider {...settings} className=\"starwars-slider col\"> */}\n        <div className=\"starwars-charts col\">\n          <h4>Planets: orbital and rotation periods</h4>\n          <BarChartComponent />\n        </div>\n        <div className=\"starwars-charts col\">\n          <h4>Height and mass of characters</h4>\n          <LineChartComponent />\n        </div>\n\n        {/* </Slider> */}\n      </div>\n    </>\n  );\n};\n","import React from \"react\";\nimport { ChartBox } from \"./components/ChartBox/ChartBox\";\nimport \"./App.scss\";\n\nconst App = () => {\n  return (\n    <section className=\"starwars\">\n      <div className=\"container\">\n        <div className=\"row text-center\">\n          <div className=\"col\">\n            <h1 className=\"starwars-title\">Star Wars Charts</h1>\n            <p className=\"starwars-subtitle\">Some chart examples from Star Wars Universe</p>\n          </div>\n        </div>\n        <ChartBox />\n      </div>\n    </section>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport ApolloClient from \"apollo-boost\";\nimport { ApolloProvider } from \"@apollo/react-hooks\";\nimport { InMemoryCache } from \"apollo-cache-inmemory\";\nimport \"../node_modules/bootstrap/dist/css/bootstrap.min.css\";\nimport \"../node_modules/slick-carousel/slick/slick-theme.css\";\nimport \"../node_modules/slick-carousel/slick/slick.css\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nconst cache = new InMemoryCache();\nconst client = new ApolloClient({\n  cache,\n  uri: \"https://swapi.graph.cool/\"\n});\n\nReactDOM.render(\n  <ApolloProvider client={client}>\n    <App />\n  </ApolloProvider>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}